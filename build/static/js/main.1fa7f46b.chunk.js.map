{"version":3,"sources":["App.js","index.js"],"names":["CharGenerator","props","top","Math","random","left","fontSizeRatio","fontsize","randNumIn256","round","rgb","toString","className","onKeyPress","e","addChars","id","charID","char","key","isExisting","tabIndex","CharCluster","chars","deleteChar","charList","map","Char","height","style","fontSize","position","color","margin","transform","onMouseOver","from","opacity","to","App","React","useState","setChars","setCharID","isMorning","setIsMorning","useCallback","prev","filter","toggleMorning","onClick","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"+OA+CA,SAASA,EAAcC,GACnB,IAEMC,EADkB,GACZC,KAAKC,SACXC,EAHkB,GAGXF,KAAKC,SAIZE,EAAgBH,KAAKC,SACrBG,EAFc,EAEHD,EAHG,IAG4B,EAAIA,GAE9CE,EAAe,kBAAOL,KAAKM,MAAsB,IAAhBN,KAAKC,WAItCM,EAAM,IAHAF,IAAeG,SAAS,IACtBH,IAAeG,SAAS,IACzBH,IAAeG,SAAS,IAcrC,OACI,6BACI,uBAAGC,UAAW,QAASC,WAbV,SAACC,GAClBb,EAAMc,SAAS,CACXC,GAAIf,EAAMgB,OACVC,KAAMJ,EAAEK,IACRjB,IAAKA,EACLG,KAAMA,EACNE,SAAUA,EACVG,IAAKA,EACLU,YAAY,KAKqCC,SAAU,GAA3D,uBACA,kBAACC,EAAD,CAAaC,MAAOtB,EAAMsB,MAAOC,WAAYvB,EAAMuB,cAM/D,SAASF,EAAYrB,GAKjB,IAAMwB,EAAWxB,EAAMsB,MAAMG,KAAI,SAACR,GAC9B,OACI,kBAACS,EAAD,CACIR,IAAKD,EAAKF,GACVA,GAAIE,EAAKF,GACTE,KAAMA,EAAKA,KACXhB,IAAKgB,EAAKhB,IACVG,KAAMa,EAAKb,KACXE,SAAUW,EAAKX,SACfqB,OAAQV,EAAKX,SACbG,IAAKQ,EAAKR,IACVc,WAAYvB,EAAMuB,gBAK9B,OACI,6BACKC,GAMb,SAASE,EAAK1B,GAMV,IAAM4B,EAAQ,CACVC,SAAS,GAAD,OAAK7B,EAAMM,SAAX,MACRwB,SAAU,WACV7B,IAAI,GAAD,OAAKD,EAAMC,IAAX,MACHG,KAAK,GAAD,OAAKJ,EAAMI,KAAX,MACJ2B,MAAM,GAAD,OAAK/B,EAAMS,KAChBuB,OAAQ,EACRC,UAAU,yBAGRhB,EAAOjB,EAAMiB,KAEnB,OACI,yBAAKW,MAAOA,EAAOM,YAAalC,EAAMuB,WAAWvB,EAAMe,KACnD,kBAAC,SAAD,CAAQoB,KAAM,CAACC,QAAS,GAAIC,GAAI,CAACD,QAAS,MACrC,SAAApC,GAAK,OAAG,yBAAK4B,MAAO5B,GAAQiB,OA2B9BqB,MA5Jf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACJlB,EADI,KACGmB,EADH,OAEiBF,IAAMC,SAAS,GAFhC,mBAEJxB,EAFI,KAEI0B,EAFJ,OAGuBH,IAAMC,UAAS,GAHtC,mBAGJG,EAHI,KAGOC,EAHP,KAKL9B,EAAWyB,IAAMM,aAAY,SAAC5B,GAChCwB,GAAS,SAACK,GAAD,OAAW7B,GAAX,mBAAoB6B,OAC7BJ,GAAU,SAACI,GAAD,OAAUA,EAAO,OAC5B,CAACL,EAAUC,IAERnB,EAAagB,IAAMM,aAAY,SAAC9B,GAAD,OACjC,WACI0B,GAAS,SAACK,GAAD,OAAUA,EAAKC,QAAO,SAAC9B,GAAD,OAAUA,EAAKF,KAAOA,WACtD,CAAC0B,IAEFO,EAAgBT,IAAMM,aAAY,kBAAMD,GAAa,SAACE,GAAD,OAAWA,OAAO,CAACF,IAS9E,OACI,yBAAKjC,UAAW,OAASgC,EAAY,YAAc,YAC/C,kBAAC5C,EAAD,CACIuB,MAAOA,EACPN,OAAQA,EACRO,WAAYA,EACZT,SAAUA,IAEd,4BACImC,QAASD,EACTrC,UAAW,eAAiBgC,EAAY,YAAc,YAErDA,EAAY,gBAAkB,qBCrC/CO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMC,IAAI,aAAaC,KAAK,gFAC5B,0BAAMD,IAAI,aAAaC,KAAK,4DAC5B,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1fa7f46b.chunk.js","sourcesContent":["import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { Spring } from 'react-spring/renderprops';\nimport './App.scss';\n\nfunction App() {\n    const [chars, setChars] = React.useState([]);\n    const [charID, setCharID] = React.useState(0);\n    const [isMorning, setIsMorning] = React.useState(true);\n\n    const addChars = React.useCallback((char) => {\n        setChars((prev) => [char, ...prev]);\n        setCharID((prev) => prev + 1);\n    }, [setChars, setCharID]);\n    \n    const deleteChar = React.useCallback((id) =>\n        () => {\n            setChars((prev) => prev.filter((char) => char.id !== id))\n        }, [setChars])\n\n    const toggleMorning = React.useCallback(() => setIsMorning((prev) => !prev), [setIsMorning]);\n\n    // How can I remove char has been erased?\n    /*\n    const cleanChar = React.useCallback(() => {\n        setChars((prev) => prev.filter((char) => char.isExisting))\n    }, [setChars])\n    */\n\n    return (\n        <div className={\"App\" + (isMorning ? \"__Morning\" : \"__Night\")}>\n            <CharGenerator\n                chars={chars}\n                charID={charID}\n                deleteChar={deleteChar}\n                addChars={addChars}\n            />\n            <button\n                onClick={toggleMorning}\n                className={\"ThemeToggle\" + (isMorning ? \"__Morning\" : \"__Night\")}\n            >\n                {isMorning ? \"Turn to night\" : \"Turn to morning\"}\n            </button>\n        </div>\n    )\n}\n\nfunction CharGenerator(props) {\n    const randomAreaWidth = 98;\n    const randomAreaHight = 95;\n    const top = Math.random() * randomAreaHight;\n    const left = Math.random() * randomAreaWidth;\n\n    const minFontSize = 0.5\n    const maxFontSize = 5\n    const fontSizeRatio = Math.random();\n    const fontsize = fontSizeRatio * maxFontSize + (1 - fontSizeRatio) * minFontSize;\n\n    const randNumIn256 = () => (Math.round(Math.random() * 256));\n    const red = randNumIn256().toString(16);\n    const green = randNumIn256().toString(16);\n    const blue = randNumIn256().toString(16);\n    const rgb = \"#\" + red + green + blue;\n\n    const generateChar = (e) => {\n        props.addChars({\n            id: props.charID,\n            char: e.key,\n            top: top,\n            left: left,\n            fontsize: fontsize,\n            rgb: rgb,\n            isExisting: true\n        });\n    }\n    return (\n        <div>\n            <p className={\"Title\"} onKeyPress={generateChar} tabIndex={0}>Generate Charactors</p>\n            <CharCluster chars={props.chars} deleteChar={props.deleteChar}/>\n        </div>\n\n    )\n}\n\nfunction CharCluster(props) {\n    // TODO : impliments char manager\n    //React.useEffect();\n\n\n    const charList = props.chars.map((char) => {\n        return (\n            <Char\n                key={char.id}\n                id={char.id}\n                char={char.char}\n                top={char.top}\n                left={char.left}\n                fontsize={char.fontsize}\n                height={char.fontsize}\n                rgb={char.rgb}\n                deleteChar={props.deleteChar}\n            />\n        );\n    })\n\n    return (\n        <div>\n            {charList}\n        </div>\n    )\n}\n\n\nfunction Char(props) {\n    //const [existing, setExisting] = React.useState(true);\n    //const erase = React.useCallback(() => setExisting(false), [setExisting]);\n\n    //React.useEffect(, [props.deleteChar]);\n\n    const style = {\n        fontSize: `${props.fontsize}em`,\n        position: \"absolute\",\n        top: `${props.top}vh`,\n        left: `${props.left}vw`,\n        color: `${props.rgb}`,\n        margin: 0,\n        transform: `translate(-50%, -50%)`\n    };\n\n    const char = props.char;\n\n    return (\n        <div style={style} onMouseOver={props.deleteChar(props.id)}>\n            <Spring from={{opacity: 0}} to={{opacity: 0.8}}>\n                {props =><div style={props}>{char}</div>}\n            </Spring>\n        </div>\n    )\n    /*\n    const spring = useSpring({\n        fontSize: `${props.fontsize}em`,\n        opacity: existing ? 0.8 : 0,\n        position: \"absolute\",\n        top: `${props.top}vh`,\n        left: `${props.left}vw`,\n        color: `${props.rgb}`,\n        margin: 0,\n        transform: `translate(-50%, -50%)`\n    });\n\n    return (\n        <animated.div\n            style={spring}\n            onMouseEnter={erase}\n        >\n            {props.char}\n        </animated.div>\n    )\n    */\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}